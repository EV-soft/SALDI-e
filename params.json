{
  "name": "Saldi-e",
  "tagline": "SALDI-€  En optimeret udgave af Danosoft-SALDI med nye kvaliteter: Responsive, CSS-baseret, PHP7-klar, blok-struktureret, øget sikkerhed og med sprogvalg.",
  "body": "### Velkommen til disse GitHub Sider.\r\n\r\n### Målsætningen med denne kode-udvikling er:\r\n\r\n  1. Konsistent modul-opbygget Code-design, så vedligeholdelse/udvikling bliver nemmere.\r\n  2. Fjernelse af inaktiv kode.\r\n  3. Hastigheds forøgelse, med fokus på repeterende rutiner.\r\n  4. Indførelse af Responsivt design, med mere moderne/fleksibelt layout.\r\n  5. CSS-design, så central ændring af udseende gøres mulig.\r\n  6. Udnyttelse af HTML5 forbedringer.\r\n  7. Al output til skærm baseres på et nyt bibliotek: out_base.php\r\n  8. Sprogvalg for program-fladen, med halv-automatisk vedligeholdelse.\r\n  9. Forøge sikkerheden omkring password. Opbevaring og styrkemåler.\r\n 10. Sikre kompatibilitet med PHP7. udgår:{func:Split(), func:ereg_*(), ext:mysql_*}\r\n     Mere her: [ https://php.net/manual/en/migration70.php ]\r\n     Og her: [ https://www.digitalocean.com/company/blog/getting-ready-for-php-7/ ]\r\n 11. Indførelse af WYSIWYG formular-design.\r\n 12. Layout af source-code forbedres, så strukturen forstås hurtigere, \r\n     og sjuskefejl afsløres.\r\n 13. Bedre program-dokumentation ved øget anvendelse af kommentarer.\r\n 14. Anvende prefix på funktionsnavne, så det afspejler kildefilen. (htm_*, out_*,...)\r\n 15. Afskaffe alle:  PRINT \"xxx\" - Benyt/opret rutiner i out_*.php\r\n 16. Afskaffe Layout-styring med tabeller, som er forældet metode.\r\n 17. Afskaffe afhængighed af: PDFTK som sjældent er installeret.\r\n 18. Ændre: BODY onLoad=javascript:alert() til CSS/jquery: msg_Dialog\r\n \r\nAd. 1. samt 4.-8. : Sker med de nye biblioteker: out_*.php\r\n\tHUSK: Benyt subRutiner (Block-struktur) i stedet for Copy-Paste! \r\n      Det øger forståelsen og reducerer begrebsforvirring, \r\n      med velvalgte navne og det letter vedligeholdelsen!\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}